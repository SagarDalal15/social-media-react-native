{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { db } from \"../firebaseConfig\";\nimport Post from \"./Post\";\nexport default function Feed(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      posts = _useState2[0],\n      setPosts = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lastVisiblePosts = _useState4[0],\n      setLastVisiblePosts = _useState4[1];\n\n  useEffect(function () {\n    var unsubscribe = db.collection(\"posts\").orderBy(\"timestamp\", \"desc\").limit(5).onSnapshot(function (snapshot) {\n      var lastVisible = snapshot.docs[snapshot.docs.length - 1];\n      setLastVisiblePosts(lastVisible);\n      setPosts(snapshot.docs.map(function (doc) {\n        return {\n          id: doc.id,\n          post: doc.data()\n        };\n      }));\n    });\n    console.log(\"Initial Post and Last Visible Post Set\");\n    return function () {\n      unsubscribe();\n      setPosts([]);\n      setLastVisiblePosts([]);\n    };\n  }, []);\n\n  var isCloseToBottom = function isCloseToBottom(_ref) {\n    var layoutMeasurement = _ref.layoutMeasurement,\n        contentOffset = _ref.contentOffset,\n        contentSize = _ref.contentSize;\n    var paddingToBottom = 0;\n    return layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;\n  };\n\n  var fetchMoreData = function fetchMoreData() {\n    if (lastVisiblePosts && lastVisiblePosts != []) {\n      var newArray = posts;\n      var next = db.collection(\"posts\").orderBy(\"timestamp\", \"desc\").startAfter(lastVisiblePosts).limit(5).onSnapshot(function (snapshot) {\n        snapshot.docs.map(function (doc) {\n          newArray.push({\n            id: doc.id,\n            post: doc.data()\n          });\n        });\n        var lastVisible = snapshot.docs[snapshot.docs.length - 1];\n        setLastVisiblePosts(lastVisible);\n      });\n      console.log(\"More Post Added\");\n      setPosts(newArray);\n    }\n  };\n\n  return React.createElement(View, {\n    style: {\n      height: \"100%\"\n    }\n  }, React.createElement(ScrollView, {\n    onScroll: function onScroll(_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (isCloseToBottom(nativeEvent)) {\n        fetchMoreData();\n      }\n    },\n    scrollEventThrottle: 400\n  }, posts.map(function (_ref3) {\n    var id = _ref3.id,\n        post = _ref3.post;\n    return React.createElement(View, {\n      key: id\n    }, React.createElement(Post, {\n      navigation: props.navigation,\n      key: id,\n      id: id,\n      profileUrl: post.profileUrl,\n      username: post.username,\n      photoUrl: post.photoUrl,\n      caption: post.caption,\n      comments: post.comments\n    }));\n  })));\n}","map":{"version":3,"sources":["/Users/sagardalal/Desktop/Desktop/Major Project/social-media-app/components/Feed.js"],"names":["React","useEffect","useState","db","Post","Feed","props","posts","setPosts","lastVisiblePosts","setLastVisiblePosts","unsubscribe","collection","orderBy","limit","onSnapshot","snapshot","lastVisible","docs","length","map","doc","id","post","data","console","log","isCloseToBottom","layoutMeasurement","contentOffset","contentSize","paddingToBottom","height","y","fetchMoreData","newArray","next","startAfter","push","nativeEvent","navigation","profileUrl","username","photoUrl","caption","comments"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ScrollView, View } from \"react-native\";\nimport { db } from \"../firebaseConfig\";\nimport Post from \"./Post\";\n\nexport default function Feed(props) {\n  const [posts, setPosts] = useState([]);\n  const [lastVisiblePosts, setLastVisiblePosts] = useState([]);\n\n  useEffect(() => {\n    const unsubscribe = db\n      .collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .limit(5)\n      .onSnapshot((snapshot) => {\n        var lastVisible = snapshot.docs[snapshot.docs.length - 1];\n        setLastVisiblePosts(lastVisible);\n\n        setPosts(\n          snapshot.docs.map((doc) => ({ id: doc.id, post: doc.data() }))\n        );\n      });\n    console.log(\"Initial Post and Last Visible Post Set\");\n\n    return () => {\n      unsubscribe();\n      setPosts([]);\n      setLastVisiblePosts([]);\n    };\n  }, []);\n\n  const isCloseToBottom = ({\n    layoutMeasurement,\n    contentOffset,\n    contentSize,\n  }) => {\n    const paddingToBottom = 0;\n    return (\n      layoutMeasurement.height + contentOffset.y >=\n      contentSize.height - paddingToBottom\n    );\n  };\n\n  const fetchMoreData = () => {\n    if (lastVisiblePosts && lastVisiblePosts != []) {\n      var newArray = posts;\n\n      var next = db\n        .collection(\"posts\")\n        .orderBy(\"timestamp\", \"desc\")\n        .startAfter(lastVisiblePosts)\n        .limit(5)\n        .onSnapshot((snapshot) => {\n          snapshot.docs.map((doc) => {\n            newArray.push({ id: doc.id, post: doc.data() });\n          });\n\n          var lastVisible = snapshot.docs[snapshot.docs.length - 1];\n          setLastVisiblePosts(lastVisible);\n        });\n\n      console.log(\"More Post Added\");\n      setPosts(newArray);\n    }\n  };\n\n  return (\n    <View style={{ height: \"100%\" }}>\n      <ScrollView\n        onScroll={({ nativeEvent }) => {\n          if (isCloseToBottom(nativeEvent)) {\n            fetchMoreData();\n          }\n        }}\n        scrollEventThrottle={400}\n      >\n        {posts.map(({ id, post }) => {\n          return (\n            <View key={id}>\n              <Post\n                navigation={props.navigation}\n                key={id}\n                id={id}\n                profileUrl={post.profileUrl}\n                username={post.username}\n                photoUrl={post.photoUrl}\n                caption={post.caption}\n                comments={post.comments}\n              />\n            </View>\n          );\n        })}\n      </ScrollView>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Camera } from \"expo-camera\";\nimport * as MediaLibrary from \"expo-media-library\";\nexport default function CreatePostScreen(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      img = _useState4[0],\n      setImg = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loaded = _useState6[0],\n      setLoaded = _useState6[1];\n\n  var _useState7 = useState(Camera.Constants.Type.back),\n      _useState8 = _slicedToArray(_useState7, 2),\n      type = _useState8[0],\n      setType = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isPreview = _useState10[0],\n      setIsPreview = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isCameraReady = _useState12[0],\n      setIsCameraReady = _useState12[1];\n\n  var cameraRef = useRef();\n\n  var _MediaLibrary$usePerm = MediaLibrary.usePermissions(),\n      _MediaLibrary$usePerm2 = _slicedToArray(_MediaLibrary$usePerm, 2),\n      status = _MediaLibrary$usePerm2[0],\n      requestPermission = _MediaLibrary$usePerm2[1];\n\n  useEffect(function () {\n    requestPermission();\n\n    (function _callee() {\n      var camera;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n            case 2:\n              camera = _context.sent;\n              setHasPermission(camera.status === \"granted\");\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n\n    props.navigation.addListener(\"focus\", function () {\n      setLoaded(true);\n    });\n    props.navigation.addListener(\"blur\", function () {\n      setLoaded(false);\n    });\n  }, []);\n\n  if (hasPermission === null) {\n    return React.createElement(View, null);\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, null, \"No access to camera\");\n  }\n\n  var clickPhoto = function clickPhoto() {\n    var options, data, source;\n    return _regeneratorRuntime.async(function clickPhoto$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!cameraRef.current) {\n              _context2.next = 11;\n              break;\n            }\n\n            options = {\n              quality: 1\n            };\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(cameraRef.current.takePictureAsync(options));\n\n          case 4:\n            data = _context2.sent;\n            source = data.uri;\n\n            if (!(data && source)) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(cameraRef.current.pausePreview());\n\n          case 9:\n            setImg(source);\n            setIsPreview(true);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var cancelPreview = function cancelPreview() {\n    return _regeneratorRuntime.async(function cancelPreview$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(cameraRef.current.resumePreview());\n\n          case 2:\n            setImg(null);\n            setIsPreview(false);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var postImage = function postImage() {\n    return _regeneratorRuntime.async(function postImage$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(cameraRef.current.resumePreview());\n\n          case 2:\n            setIsCameraReady(false);\n            setIsPreview(false);\n            props.navigation.navigate(\"AddCaptionScreen\", {\n              img: img\n            });\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, loaded && React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(Camera, {\n    ref: cameraRef,\n    style: {\n      flex: 2\n    },\n    type: type,\n    ratio: \"1:1\",\n    onCameraReady: function onCameraReady() {\n      setIsCameraReady(true);\n    }\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: \"grey\"\n    }\n  }, isPreview && React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: \"row\",\n      justifyContent: \"space-around\",\n      alignItems: \"center\"\n    }\n  }, React.createElement(Text, {\n    onPress: cancelPreview,\n    style: {\n      fontSize: 18,\n      color: \"white\"\n    }\n  }, \"Retake\"), React.createElement(Text, {\n    onPress: postImage,\n    style: {\n      fontSize: 18,\n      color: \"white\"\n    }\n  }, \"Post\")), !isPreview && React.createElement(View, {\n    style: {\n      flex: 1,\n      flexDirection: \"row\",\n      justifyContent: \"space-around\",\n      alignItems: \"center\"\n    }\n  }, React.createElement(TouchableOpacity, {\n    disabled: !isCameraReady\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 18,\n      color: \"white\"\n    }\n  }, \"Photo Gallery\")), React.createElement(TouchableOpacity, {\n    disabled: !isCameraReady\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 18,\n      color: \"white\"\n    },\n    onPress: clickPhoto\n  }, \"Click to Click\")), React.createElement(TouchableOpacity, {\n    disabled: !isCameraReady,\n    onPress: function onPress() {\n      setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 18,\n      color: \"white\"\n    }\n  }, \"Flip Screen\"))))));\n}","map":{"version":3,"sources":["/Users/sagardalal/Desktop/Desktop/Major Project/social-media-app/screens/CreatePostScreen/index.js"],"names":["React","useState","useEffect","useRef","Camera","MediaLibrary","CreatePostScreen","props","hasPermission","setHasPermission","img","setImg","loaded","setLoaded","Constants","Type","back","type","setType","isPreview","setIsPreview","isCameraReady","setIsCameraReady","cameraRef","usePermissions","status","requestPermission","requestCameraPermissionsAsync","camera","navigation","addListener","clickPhoto","current","options","quality","takePictureAsync","data","source","uri","pausePreview","cancelPreview","resumePreview","postImage","navigate","flex","backgroundColor","flexDirection","justifyContent","alignItems","fontSize","color","front"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Text, View, TouchableOpacity } from \"react-native\";\nimport { Camera } from \"expo-camera\";\nimport * as MediaLibrary from \"expo-media-library\";\n\nexport default function CreatePostScreen(props) {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [img, setImg] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n\n  //Camera Type\n  const [type, setType] = useState(Camera.Constants.Type.back);\n  const [isPreview, setIsPreview] = useState(false);\n  const [isCameraReady, setIsCameraReady] = useState(false);\n  const cameraRef = useRef();\n\n  const [status, requestPermission] = MediaLibrary.usePermissions();\n\n  useEffect(() => {\n    // request permission to access media library\n    requestPermission();\n    (async () => {\n      const camera = await Camera.requestCameraPermissionsAsync();\n      setHasPermission(camera.status === \"granted\");\n    })();\n\n    // Is user on camera screen\n    props.navigation.addListener(\"focus\", () => {\n      setLoaded(true);\n    });\n\n    // Is user on camera screen\n    props.navigation.addListener(\"blur\", () => {\n      setLoaded(false);\n    });\n  }, []);\n\n  if (hasPermission === null) {\n    return <View />;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  const clickPhoto = async () => {\n    if (cameraRef.current) {\n      const options = { quality: 1 };\n\n      const data = await cameraRef.current.takePictureAsync(options);\n      const source = data.uri;\n\n      if (data && source) {\n        await cameraRef.current.pausePreview();\n        setImg(source);\n        setIsPreview(true);\n      }\n    }\n  };\n\n  const cancelPreview = async () => {\n    await cameraRef.current.resumePreview();\n    setImg(null);\n    setIsPreview(false);\n  };\n\n  const postImage = async () => {\n    await cameraRef.current.resumePreview();\n    setIsCameraReady(false);\n    setIsPreview(false);\n    props.navigation.navigate(\"AddCaptionScreen\", { img: img });\n  };\n\n  return (\n    <View style={{ flex: 1 }}>\n      {loaded && (\n        <View style={{ flex: 1 }}>\n          <Camera\n            ref={cameraRef}\n            style={{ flex: 2 }}\n            type={type}\n            ratio=\"1:1\"\n            onCameraReady={() => {\n              setIsCameraReady(true);\n            }}\n          ></Camera>\n\n          <View\n            style={{\n              flex: 1,\n              backgroundColor: \"grey\",\n            }}\n          >\n            {isPreview && (\n              <View\n                style={{\n                  flex: 1,\n                  flexDirection: \"row\",\n                  justifyContent: \"space-around\",\n                  alignItems: \"center\",\n                }}\n              >\n                <Text\n                  onPress={cancelPreview}\n                  style={{\n                    fontSize: 18,\n                    color: \"white\",\n                  }}\n                >\n                  Retake\n                </Text>\n                <Text\n                  onPress={postImage}\n                  style={{\n                    fontSize: 18,\n                    color: \"white\",\n                  }}\n                >\n                  Post\n                </Text>\n              </View>\n            )}\n            {!isPreview && (\n              <View\n                style={{\n                  flex: 1,\n                  flexDirection: \"row\",\n                  justifyContent: \"space-around\",\n                  alignItems: \"center\",\n                }}\n              >\n                <TouchableOpacity disabled={!isCameraReady}>\n                  <Text style={{ fontSize: 18, color: \"white\" }}>\n                    Photo Gallery\n                  </Text>\n                </TouchableOpacity>\n                <TouchableOpacity disabled={!isCameraReady}>\n                  <Text\n                    style={{ fontSize: 18, color: \"white\" }}\n                    onPress={clickPhoto}\n                  >\n                    Click to Click\n                  </Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  disabled={!isCameraReady}\n                  onPress={() => {\n                    setType(\n                      type === Camera.Constants.Type.back\n                        ? Camera.Constants.Type.front\n                        : Camera.Constants.Type.back\n                    );\n                  }}\n                >\n                  <Text style={{ fontSize: 18, color: \"white\" }}>\n                    Flip Screen\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            )}\n          </View>\n        </View>\n      )}\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
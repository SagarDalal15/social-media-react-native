{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { UserContext } from \"./contexts/user\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport CommentsScreen from \"./screens/CommentsScreen\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { logout } from \"./services/auth\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport CreatePostScreen from \"./screens/CreatePostScreen\";\nimport AddCaptionScreen from \"./screens/AddCaptionScreen\";\nimport HomeScreenTest from \"./screens/HomeScreenTest\";\nvar Stack = createNativeStackNavigator();\nexport default function MyNavigation() {\n  var _useContext = useContext(UserContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      user = _useContext2[0],\n      setUser = _useContext2[1];\n\n  var storeData = function storeData(value) {\n    var jsonValue;\n    return _regeneratorRuntime.async(function storeData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            jsonValue = JSON.stringify(value);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(undefined, jsonValue));\n\n          case 4:\n            _context.next = 8;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  var logoutButton = function logoutButton(navigation) {\n    var res;\n    return _regeneratorRuntime.async(function logoutButton$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(logout());\n\n          case 2:\n            res = _context2.sent;\n\n            if (res) {\n              storeData(null);\n              setUser(null);\n            }\n\n            navigation.reset({\n              index: 0,\n              routes: [{\n                name: \"LoginScreen\"\n              }]\n            });\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(NavigationContainer, null, React.createElement(Stack.Navigator, {\n    initialRouteName: \"LoginScreen\"\n  }, React.createElement(Stack.Screen, {\n    name: \"LoginScreen\",\n    component: LoginScreen\n  }), React.createElement(Stack.Screen, {\n    name: \"HomeScreen\",\n    options: function options(_ref) {\n      var navigation = _ref.navigation,\n          route = _ref.route;\n      return {\n        title: \"My Home Page\",\n        headerStyle: {\n          backgroundColor: \"white\"\n        },\n        headerTitleStyle: {\n          fontWeight: \"bold\"\n        },\n        headerLeft: function headerLeft() {\n          return React.createElement(TouchableOpacity, {\n            onPress: function onPress() {\n              return logoutButton(navigation);\n            },\n            style: {\n              borderRadius: 10,\n              justifyContent: \"center\",\n              padding: 5,\n              height: 40,\n              backgroundColor: \"blue\"\n            }\n          }, React.createElement(Text, {\n            style: {\n              color: \"white\"\n            }\n          }, \"LOG OUT\"));\n        }\n      };\n    },\n    component: HomeScreen\n  }), React.createElement(Stack.Screen, {\n    name: \"HomeScreenTest\",\n    options: function options(_ref2) {\n      var navigation = _ref2.navigation,\n          route = _ref2.route;\n      return {\n        title: \"My Home Page\",\n        headerStyle: {\n          backgroundColor: \"#f4511e\"\n        },\n        headerTintColor: \"#fff\",\n        headerTitleStyle: {\n          fontWeight: \"bold\"\n        },\n        headerLeft: function headerLeft() {\n          return React.createElement(TouchableOpacity, {\n            onPress: function onPress() {\n              return logoutButton(navigation);\n            },\n            style: {\n              borderRadius: 10,\n              justifyContent: \"center\",\n              padding: 5,\n              height: 40,\n              backgroundColor: \"blue\"\n            }\n          }, React.createElement(Text, {\n            style: {\n              color: \"white\"\n            }\n          }, \"LOG OUT\"));\n        }\n      };\n    },\n    component: HomeScreenTest\n  }), React.createElement(Stack.Screen, {\n    name: \"CommentsScreen\",\n    component: CommentsScreen\n  }), React.createElement(Stack.Screen, {\n    name: \"CreatePostScreen\",\n    component: CreatePostScreen\n  }), React.createElement(Stack.Screen, {\n    name: \"AddCaptionScreen\",\n    component: AddCaptionScreen\n  })));\n}","map":{"version":3,"sources":["/Users/sagardalal/Desktop/Desktop/Major Project/social-media-app/MyNavigation.js"],"names":["React","useContext","UserContext","LoginScreen","HomeScreen","CommentsScreen","createNativeStackNavigator","logout","AsyncStorage","NavigationContainer","CreatePostScreen","AddCaptionScreen","HomeScreenTest","Stack","MyNavigation","user","setUser","storeData","value","jsonValue","JSON","stringify","setItem","logoutButton","navigation","res","reset","index","routes","name","route","title","headerStyle","backgroundColor","headerTitleStyle","fontWeight","headerLeft","borderRadius","justifyContent","padding","height","color","headerTintColor"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { Text, TouchableOpacity } from \"react-native\";\n\nimport { UserContext } from \"./contexts/user\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport CommentsScreen from \"./screens/CommentsScreen\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { logout } from \"./services/auth\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { ASYNC_STORAGE_KEY } from \"@env\";\nimport CreatePostScreen from \"./screens/CreatePostScreen\";\nimport AddCaptionScreen from \"./screens/AddCaptionScreen\";\n\n//test import\nimport HomeScreenTest from \"./screens/HomeScreenTest\";\n\nconst Stack = createNativeStackNavigator();\n\nexport default function MyNavigation() {\n  const [user, setUser] = useContext(UserContext);\n\n  // Async Storage => store data\n  const storeData = async (value) => {\n    try {\n      const jsonValue = JSON.stringify(value);\n      await AsyncStorage.setItem(ASYNC_STORAGE_KEY, jsonValue);\n    } catch (e) {\n      // saving error\n    }\n  };\n\n  const logoutButton = async (navigation) => {\n    const res = await logout();\n    if (res) {\n      storeData(null);\n      setUser(null);\n    }\n\n    // Resetting Login Screen Index to 0\n    navigation.reset({\n      index: 0,\n      routes: [{ name: \"LoginScreen\" }],\n    });\n  };\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"LoginScreen\">\n        <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n        <Stack.Screen\n          name=\"HomeScreen\"\n          options={({ navigation, route }) => ({\n            title: \"My Home Page\",\n            headerStyle: {\n              // backgroundColor: \"#f4511e\",\n              backgroundColor: \"white\",\n            },\n            // headerTintColor: \"#fff\",\n            headerTitleStyle: {\n              fontWeight: \"bold\",\n            },\n            headerLeft: () => (\n              <TouchableOpacity\n                onPress={() => logoutButton(navigation)}\n                style={{\n                  borderRadius: 10,\n\n                  justifyContent: \"center\",\n                  padding: 5,\n                  height: 40,\n                  backgroundColor: \"blue\",\n                }}\n              >\n                <Text style={{ color: \"white\" }}>LOG OUT</Text>\n              </TouchableOpacity>\n            ),\n          })}\n          component={HomeScreen}\n        />\n        <Stack.Screen\n          name=\"HomeScreenTest\"\n          options={({ navigation, route }) => ({\n            title: \"My Home Page\",\n            headerStyle: {\n              backgroundColor: \"#f4511e\",\n            },\n            headerTintColor: \"#fff\",\n            headerTitleStyle: {\n              fontWeight: \"bold\",\n            },\n            headerLeft: () => (\n              <TouchableOpacity\n                onPress={() => logoutButton(navigation)}\n                style={{\n                  borderRadius: 10,\n\n                  justifyContent: \"center\",\n                  padding: 5,\n                  height: 40,\n                  backgroundColor: \"blue\",\n                }}\n              >\n                <Text style={{ color: \"white\" }}>LOG OUT</Text>\n              </TouchableOpacity>\n            ),\n          })}\n          component={HomeScreenTest}\n        />\n        <Stack.Screen name=\"CommentsScreen\" component={CommentsScreen} />\n        <Stack.Screen name=\"CreatePostScreen\" component={CreatePostScreen} />\n        <Stack.Screen name=\"AddCaptionScreen\" component={AddCaptionScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { UserContext } from \"../../contexts/user\";\nimport makeid from \"../../helper/functions\";\nimport { db, storage } from \"../../firebaseConfig\";\nimport firebase from \"firebase\";\nexport default function AddCaptionScreen(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      caption = _useState2[0],\n      setCaption = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      progress = _useState4[0],\n      setProgress = _useState4[1];\n\n  var _useContext = useContext(UserContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      user = _useContext2[0],\n      setUser = _useContext2[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      image = _useState6[0],\n      setImage = _useState6[1];\n\n  useEffect(function () {\n    var asyncFunction = function asyncFunction() {\n      var fetchedImage, imageBlob;\n      return _regeneratorRuntime.async(function asyncFunction$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(props.route.params.img));\n\n            case 2:\n              fetchedImage = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(fetchedImage.blob());\n\n            case 5:\n              imageBlob = _context.sent;\n              setImage(imageBlob);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    asyncFunction();\n  }, []);\n  useEffect(function () {\n    if (progress === 100 && caption === \"\" && image === null) {\n      props.navigation.navigate(\"HomeScreen\");\n    }\n  }, [progress, image, caption]);\n\n  var handleUpload = function handleUpload() {\n    var metadata, imageName, uploadTask;\n    return _regeneratorRuntime.async(function handleUpload$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (image) {\n              metadata = {\n                contentType: \"image/jpeg\"\n              };\n              imageName = makeid(10);\n              uploadTask = storage.ref(\"images/\" + imageName + \".jpg\").put(image, metadata);\n              uploadTask.on(\"state_changed\", function (snapshot) {\n                var progress = Math.round(snapshot.bytesTransferred / snapshot.totalBytes * 100);\n                setProgress(progress);\n              }, function (error) {\n                console.log(error);\n              }, function () {\n                storage.ref(\"images\").child(imageName + \".jpg\").getDownloadURL().then(function (imageUrl) {\n                  db.collection(\"posts\").add({\n                    timestamp: firebase.firestore.Timestamp.now(),\n                    caption: caption,\n                    photoUrl: imageUrl,\n                    username: user.email.replace(\"@gmail.com\", \"\"),\n                    profileUrl: user.photoURL ? user.photoURL : \"https://firebasestorage.googleapis.com/v0/b/reactsocialapptutorial.appspot.com/o/images%2Fblank-profile.webp?alt=media&token=d749fb07-d371-4927-b3d7-ac16abd31c9e\"\n                  });\n                });\n                setCaption(\"\");\n                setImage(null);\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, null, React.createElement(Image, {\n    style: {\n      width: \"100%\",\n      height: undefined,\n      aspectRatio: 1 / 1,\n      resizeMode: \"contain\",\n      backgroundColor: \"white\"\n    },\n    source: {\n      uri: props.route.params.img\n    }\n  }), React.createElement(TextInput, {\n    value: caption,\n    onChangeText: setCaption,\n    placeholder: \"Add Caption\"\n  }), React.createElement(Text, {\n    onPress: handleUpload\n  }, \"Post\", progress));\n}","map":{"version":3,"sources":["/Users/sagardalal/Desktop/Desktop/Major Project/social-media-app/screens/AddCaptionScreen/index.js"],"names":["React","useContext","useEffect","useState","UserContext","makeid","db","storage","firebase","AddCaptionScreen","props","caption","setCaption","progress","setProgress","user","setUser","image","setImage","asyncFunction","fetch","route","params","img","fetchedImage","blob","imageBlob","navigation","navigate","handleUpload","metadata","contentType","imageName","uploadTask","ref","put","on","snapshot","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","imageUrl","collection","add","timestamp","firestore","Timestamp","now","photoUrl","username","email","replace","profileUrl","photoURL","width","height","undefined","aspectRatio","resizeMode","backgroundColor","uri"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Image, Text, TextInput, View } from \"react-native\";\n\nimport { UserContext } from \"../../contexts/user\";\nimport makeid from \"../../helper/functions\";\nimport { db, storage } from \"../../firebaseConfig\";\nimport firebase from \"firebase\";\n\nexport default function AddCaptionScreen(props) {\n  const [caption, setCaption] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [user, setUser] = useContext(UserContext);\n  const [image, setImage] = useState();\n\n  useEffect(() => {\n    const asyncFunction = async () => {\n      const fetchedImage = await fetch(props.route.params.img);\n      const imageBlob = await fetchedImage.blob();\n\n      setImage(imageBlob);\n    };\n    asyncFunction();\n  }, []);\n\n  useEffect(() => {\n    if (progress === 100 && caption === \"\" && image === null) {\n      props.navigation.navigate(\"HomeScreen\");\n    }\n  }, [progress, image, caption]);\n\n  const handleUpload = async () => {\n    if (image) {\n      var metadata = {\n        contentType: \"image/jpeg\",\n      };\n\n      var imageName = makeid(10);\n      const uploadTask = storage\n        .ref(`images/${imageName}.jpg`)\n        .put(image, metadata);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          //progress function\n\n          const progress = Math.round(\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n          );\n          setProgress(progress);\n        },\n        (error) => {\n          console.log(error);\n        },\n        () => {\n          //get download url and upload the post info\n          storage\n            .ref(\"images\")\n            .child(`${imageName}.jpg`)\n            .getDownloadURL()\n            .then((imageUrl) => {\n              db.collection(\"posts\").add({\n                timestamp: firebase.firestore.Timestamp.now(),\n                caption: caption,\n                photoUrl: imageUrl,\n                username: user.email.replace(\"@gmail.com\", \"\"),\n                profileUrl: user.photoURL\n                  ? user.photoURL\n                  : \"https://firebasestorage.googleapis.com/v0/b/reactsocialapptutorial.appspot.com/o/images%2Fblank-profile.webp?alt=media&token=d749fb07-d371-4927-b3d7-ac16abd31c9e\",\n              });\n            });\n          setCaption(\"\");\n          setImage(null);\n        }\n      );\n    }\n  };\n\n  return (\n    <View>\n      <Image\n        style={{\n          width: \"100%\",\n          height: undefined,\n          aspectRatio: 1 / 1,\n          resizeMode: \"contain\",\n          backgroundColor: \"white\",\n        }}\n        source={{\n          uri: props.route.params.img,\n        }}\n      />\n\n      <TextInput\n        value={caption}\n        onChangeText={setCaption}\n        placeholder=\"Add Caption\"\n      />\n      <Text onPress={handleUpload}>Post{progress}</Text>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Comment from \"../../components/Comment\";\nimport { UserContext } from \"../../contexts/user\";\nimport { db } from \"../../firebaseConfig\";\nexport default function CommentsScreen(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      comment = _useState2[0],\n      setComment = _useState2[1];\n\n  var _useContext = useContext(UserContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      user = _useContext2[0],\n      setUser = _useContext2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allComments = _useState4[0],\n      setAllComments = _useState4[1];\n\n  var commentArray = allComments;\n  var scrollViewRef = useRef();\n  useEffect(function () {\n    if (route.params.comments) {\n      setAllComments(route.params.comments);\n    }\n\n    return function () {\n      setAllComments([]);\n      setComment(\"\");\n    };\n  }, []);\n\n  var addComment = function addComment() {\n    if (comment !== \"\") {\n      commentArray.push({\n        comment: comment,\n        username: user.email.replace(\"@gmail.com\", \"\").toLowerCase()\n      });\n      setComment(\"\");\n      db.collection(\"posts\").doc(route.params.id).update({\n        comments: commentArray\n      }).then(function () {\n        console.log(\"comment added\");\n      }).catch(function (error) {\n        console.log(\"Error \" + error);\n      });\n      scrollViewRef.current.scrollToEnd({\n        animated: true\n      });\n      Keyboard.dismiss();\n    }\n  };\n\n  return React.createElement(KeyboardAvoidingView, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(ScrollView, {\n    ref: scrollViewRef,\n    keyboardShouldPersistTaps: \"always\",\n    style: {\n      marginBottom: 80,\n      paddingTop: 2,\n      paddingHorizontal: 5\n    }\n  }, allComments && allComments.map(function (comment, idx) {\n    return React.createElement(View, {\n      key: idx\n    }, React.createElement(Comment, {\n      username: comment.username,\n      com: comment.comment\n    }));\n  })), React.createElement(View, {\n    style: {\n      position: \"absolute\",\n      width: \"100%\",\n      backgroundColor: \"white\",\n      bottom: 0\n    }\n  }, React.createElement(TextInput, {\n    style: {\n      paddingLeft: 12,\n      paddingRight: 12,\n      fontSize: 20,\n      height: 45\n    },\n    value: comment,\n    onChangeText: function onChangeText(text) {\n      return setComment(text);\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: addComment\n  }, React.createElement(Text, {\n    style: {\n      color: \"white\",\n      textAlign: \"center\",\n      paddingVertical: 14,\n      width: \"100%\",\n      backgroundColor: \"blue\",\n      fontSize: 18\n    }\n  }, \"Post\"))));\n}","map":{"version":3,"sources":["/Users/sagardalal/Desktop/Desktop/Major Project/social-media-app/screens/CommentsScreen/index.js"],"names":["React","useContext","useEffect","useRef","useState","SafeAreaView","Comment","UserContext","db","CommentsScreen","route","comment","setComment","user","setUser","allComments","setAllComments","commentArray","scrollViewRef","params","comments","addComment","push","username","email","replace","toLowerCase","collection","doc","id","update","then","console","log","catch","error","current","scrollToEnd","animated","Keyboard","dismiss","flex","marginBottom","paddingTop","paddingHorizontal","map","idx","position","width","backgroundColor","bottom","paddingLeft","paddingRight","fontSize","height","text","color","textAlign","paddingVertical"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport {\n  Button,\n  Dimensions,\n  Keyboard,\n  KeyboardAvoidingView,\n  ScrollView,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Comment from \"../../components/Comment\";\nimport { UserContext } from \"../../contexts/user\";\nimport { db } from \"../../firebaseConfig\";\n\nexport default function CommentsScreen({ route }) {\n  const [comment, setComment] = useState(\"\");\n  const [user, setUser] = useContext(UserContext);\n\n  const [allComments, setAllComments] = useState([]);\n  const commentArray = allComments;\n\n  const scrollViewRef = useRef();\n\n  useEffect(() => {\n    if (route.params.comments) {\n      setAllComments(route.params.comments);\n    }\n\n    return () => {\n      setAllComments([]);\n      setComment(\"\");\n    };\n  }, []);\n\n  const addComment = () => {\n    if (comment !== \"\") {\n      //add comment to the post info\n\n      commentArray.push({\n        comment: comment,\n        username: user.email.replace(\"@gmail.com\", \"\").toLowerCase(),\n      });\n\n      setComment(\"\");\n      // Add comment to database\n      db.collection(\"posts\")\n        .doc(route.params.id)\n        .update({\n          comments: commentArray,\n        })\n        .then(function () {\n          console.log(\"comment added\");\n\n          // // get all comments and set to AllComments\n          // db.collection(\"posts\")\n          //   .doc(route.params.id)\n          //   .get()\n          //   .then((doc) => {\n          //     console.log(\"updated data\");\n          //       setAllComments(doc.data().comments);\n          //   });\n        })\n        .catch(function (error) {\n          console.log(`Error ${error}`);\n        });\n\n      // scrolling to end\n      scrollViewRef.current.scrollToEnd({ animated: true });\n      // Dismiss keyboard\n      Keyboard.dismiss();\n    }\n  };\n\n  return (\n    <KeyboardAvoidingView style={{ flex: 1 }}>\n      <ScrollView\n        ref={scrollViewRef}\n        keyboardShouldPersistTaps=\"always\"\n        style={{\n          marginBottom: 80,\n          paddingTop: 2,\n          paddingHorizontal: 5,\n        }}\n      >\n        {allComments &&\n          allComments.map((comment, idx) => (\n            <View key={idx}>\n              <Comment username={comment.username} com={comment.comment} />\n            </View>\n          ))}\n      </ScrollView>\n      <View\n        style={{\n          position: \"absolute\",\n          width: \"100%\",\n          backgroundColor: \"white\",\n          bottom: 0,\n        }}\n      >\n        <TextInput\n          style={{\n            paddingLeft: 12,\n            paddingRight: 12,\n            fontSize: 20,\n            height: 45,\n          }}\n          value={comment}\n          onChangeText={(text) => setComment(text)}\n        />\n        <TouchableOpacity onPress={addComment}>\n          <Text\n            style={{\n              color: \"white\",\n              textAlign: \"center\",\n              paddingVertical: 14,\n              width: \"100%\",\n              backgroundColor: \"blue\",\n              fontSize: 18,\n            }}\n          >\n            Post\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}